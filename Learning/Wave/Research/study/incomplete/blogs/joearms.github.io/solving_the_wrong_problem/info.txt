2004 end of moore's law:
- chips were so big and the clock rates so fast that clock pulses could not reach all parts of the chip in one clock cycle.
- circuit designs changed.
- the multi-core came.
- chips still got bigger, but clock rates started sinking and the number of cpu's per chip started increasing
- sequential programs started getting slower
- parallel programs started getting faster

amdahl's law hits you in the face if your parallel program has any sequential parts
- http://en.wikipedia.org/wiki/Amdahl%27s_law

suppose 10% of your program is sequential (the rest being parallel)
- the time to execute the parallel bit can be shrunk to zero by having sufficiently many parallel processors.
- but the sequential part will remain.
- maximum speedup will be a factor of 10 (one tenth of the program can never speed up; the time for the other 9/10's can shrink to zero)

trick to speeding up programs:
- for erlang programmers: find the sequential parts in the code
- for sequential programmers: find the parallel parts in the code

LOCK FREE:
They found a bottleneck in an image processing application, there was a lock in zlib which was written in C. They rewrote it in Erlang, going from C to Erlang.

This is crazy, C should go faster, well yes it does but it had a lock. Erlang was slower but lock-free and thus scaleable. So removing the C and doing image processing in Erlang was faster than doing it in C.
