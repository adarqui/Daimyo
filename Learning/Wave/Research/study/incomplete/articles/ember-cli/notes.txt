http://www.ember-cli.com/

modules:
- uses es6 module transpiler: turns es6 module syntax into AMD/requireJS modules

tests:
- preconfigured to use QUnit

dependency management:
- front-end dependencies: bower
- internal dependencies: npm

runtime configuration:
- ~/.ember-cli

installing:
- npm install -g ember-cli
- npm install -g bower
- watchman
- npm install -g phantomjs

creating new app:
- embew new app
- cd app
- npm install && bower install
- ember server

ember server:
- ember server --proxy http://127.0.0.1:8080
- proxies all ajax requests to http://127.0.0.1:8080

ember resolver:
- mechanism responsible for looking up code in your application and converting its naming conventions into the actual classes, functions, templates that ember needs to resolve its dependencies

to use Ember or Ds, import them:
 import Ember from "ember";
 import DS from "ember-data";

resolving from template helpers:
{{partial "..."}}
{{view "..."}}
{{render "..." <context>}}

globals:
If you want to use external libraries that write to a global namespace (e.g. moment.js), you need to add those to the predef section of your projectâ€™s .jshintrc file and set its value to true.

Overview

Dashes
    file names
    folder names
    html tags/ember components
    CSS classes
    URLs
camelCase
    JavaScript
    JSON


models: todo example
1 // models/todo.js
 2 import DS from "ember-data";
 3 
 4 export default DS.Model.extend({
 5   title: DS.attr('string'),
 6   isCompleted: DS.attr('boolean'),
 7   quickNotes: DS.hasMany('quick-note')
 8 });
 9 
10 // models/quick-note.js
11 import DS from "ember-data";
12 
13 export default DS.Model.extend({
14   name: DS.attr('string'),
15   todo: DS.belongsTo('todo')
16 });


generating mocks:
- ember g http-mock posts
- creates an expressjs server for testing
- mocks are just for development and testing.
- the entire /server directory will be ignored during ember build.

tests:
- after you run ember server, navigate to: http://localhost:4200/tests


leftoff asset compilation
