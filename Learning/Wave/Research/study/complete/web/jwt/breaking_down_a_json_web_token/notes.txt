JWT: json web tokens
- pronounced "jot"
- self contained: carry all info necessary within itself: header, payload + signature
- can be passed around easily: http header, url

draft:
- http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html

jwt identified by:
aaaaaaaaaa.bbbbbbbbbbb.cccccccccccc
header     payload     signature

first part: header:
- declares the type (JWT)
- declares the hashing algorithm
- base64 this to get the header: { "typ": "JWT", "alg": "HS256" }

second part: payload:
- bulk of our jwt
- also called: JWT claims: registered claim names, public claim names, private claim names
- base64 this to get payload: { "iss": "scotch.io", "exp": 1300819380, "name": "Chris Sevilleja", "admin": true }

registered claims:
iss: The issuer of the token
sub: The subject of the token
aud: The audience of the token
exp: This will probably be the registered claim most often used. This will define the expiration in NumericDate value. The expiration MUST be before the current date/time.
nbf: Defines the time before which the JWT MUST NOT be accepted for processing
iat: The time the JWT was issued. Can be used to determine the age of the JWT
jti: Unique identifier for the JWT. Can be used to prevent the JWT from being replayed. This is helpful for a one time use token.

public claims:
- claims we create ourselves; username, info, etc

private claims:
- producer/consumer may agree to use claim names that are private
- subject to collision

third part: signature:
- hash of the following components: header, payload, secret
var encodedString = base64UrlEncode(header) + "." + base64UrlEncode(payload);
HMACSHA256(encodedString, 'secret');
