promise:
- construct that "eventually" (asynchronously) yields a value
- it can either "resolve" or "reject"
- once either of these results is reached, a promise cannot change its state, or the value it produced
- immutable
- several consumers can be attached to the same promise: guaranteed to see the same value and state
- interact with promises through its "then" method

promise A+ spec:
- implementations: Q.js, Bluebird, RSVP.js

var promise = new RSVP.Promise(function(resolve, reject)) {
  // call 'resolve' with the value if the operation is successful
  // call 'reject' with the error reason if the operation is unsuccessful
})

ember run loop:
- aims to reduce the amount of work done by batching tasks together in queues
- composed of queues
- each task is put into one of these queues depending on its type
- queues have priority
- access in console by: Ember.run.queues
    [“sync”, “actions”, “routerTransitions”, “render”, “afterRender”, “destroy”]
    highest priority: sync
    lowest priority: destroy
- promise resolution happens in "actions"

ember:
- "The URL is the UI of the web"
- "Don't break the Back button"

"If a promise is returned from the model hook (like in the above case), the rendering of the part of the screen that belongs to the route does not start until the promise is resolved."
- promises are resolved in the actions queue
- router transitions (calling model hook) take place in routerTransitions
- DOM rendering happens in render
- actions -> routerTransitions -> render
- everything appears at once instead of being rendered in steps

acceptance tests:
- ensure that an application works properly by automating the user flow of its main features
- safety net against regression
- testing promises: visit, click, fillIn, andThen; all return a promise that is resolved only after all asynchronous operations have been completed.

Loading records, reloading a single record, saving and deleting all return promises so you can choose to react to successes and handle errors in any way you see fit in these scenarios.
