mvc:
- not a design pattern
- architectural pattern
- describes a way to structure our applications and the responsibilities/interactions for each part in that structure
- most obvious advantage: clear separation of presentation and application logic

popularized mvc:
- struts
- ruby on rails

mvc architectural pattern: must have this separation
- model: handle data and business logic
- view: present data to the user in any supported format and layout
- controller: receive user requests and call appropriate resources to carry them out

controller:
- manages user requests
- call and coordinate the necessary resources/objects needed to perform the user action.
- will call the appropriate model for the task and then selects the proper view
- contains internal-organization logic for the application itself
- a main/app controller receives all requests and calls the specific controllers than handles actions for each case

model:
- data and rules applying to that data
- gives the controller a data representation of whatever the user requests
- data model will be the same no matter how we may want to present it to the user
- contains the most important part of our application logic: business logic

view:
- provides different ways to present the data received from the model
- may be templtes
- may have several views which the controller picks from

mvc framework:
- basic structure already prepared, just need to extend that structure

