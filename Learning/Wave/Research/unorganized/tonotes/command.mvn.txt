source: http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
source: http://maven.apache.org/guides/getting-started/index.html


Creating a project:
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

or

mvn -B archetype:generate \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -DgroupId=com.mycompany.app \
  -DartifactId=my-app


Building a project:
mvn package


"mvn package"
- package here is a "phrase"
- a phrase is a step in a build lifecycle, which is an ordered sequence of phases
- everything up to that phase gets run in order


compile phase:
- validate
- generate-sources
- process-sources
- generate-resources
- process-resources
- compile


Phrases can be run in succession:
mvn clean dependency:copy-dependencies package


Run newly created package:
java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App


Standard Structure:

my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java


pom.xml:
- POM aka Project Object Model
- core of a project's configuration in maven


Mave Phrases:
Although hardly a comprehensive list, these are the most common default lifecycle phases executed.

validate: validate the project is correct and all necessary information is available
compile: compile the source code of the project
test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package: take the compiled code and package it in its distributable format, such as a JAR.
integration-test: process and deploy the package if necessary into an environment where integration tests can be run
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the local repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
There are two other Maven lifecycles of note beyond the default list above. They are

clean: cleans up artifacts created by prior builds
site: generates site documentation for this project
