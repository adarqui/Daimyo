uml:
- source: http://stackoverflow.com/questions/1874049/uml-arrows-pointers-explanation
- source: http://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/

In UML 2 there are two basic categories of diagrams: structure diagrams and behavior diagrams

structure diagram: show static structure of the system being modeled.
- include the class, component, and or object diagrams

behavior diagram: show the dynamic behavior between the objects in the system
- include things like their methods, collaborations, and activities.


structure diagram:
As I have said, structure diagrams show the static structure of the system being modeled. focusing on the elements of a system, irrespective of time. Static structure is conveyed by showing the types and their instances in the system. Besides showing system types and their instances, structure diagrams also show at least some of the relationships among and between these elements and potentially even show their internal structure.

class: rectangle
- top compartment: name
- middle compartment: attribute list
- bottom compartment: class operation's list

Inheritance
A very important concept in object-oriented design, inheritance, refers to the ability of one class (child class) to inherit the identical functionality of another class (super class), and then add new functionality of its own.

inheritance: solid line with arrow
To model inheritance on a class diagram, a solid line is drawn from the child class (the class inheriting the behavior) with a closed, unfilled arrowhead (or triangle) pointing to the super class. 

Bi-directional (standard) association
- A bi-directional association is indicated by a solid line between the two classes
An association is a linkage between two classes. Associations are always assumed to be bi-directional; this means that both classes are aware of each other and their relationship, unless you qualify the association as some other type.

Uni-directional association
In a uni-directional association, two classes are related, but only one class knows that the relationship exists.

A class and an interface differ: A class can have an actual instance of its type, whereas an interface must have at least one class to implement it.

Table 4: Marks for UML-supported visibility types
Mark    Visibility type
+   Public
#   Protected
-   Private
~   Package



