source: http://en.wikipedia.org/wiki/Composition_over_inheritance

belief that:
- classes should achieve polymorphic behavior and code reuse by composition instead of inheritance
- composition (containing other classes that implement the desired functionality)
- inheritance (subclass)

go uses type composition exclusively.

composition over inheritance typically begins:
- creation of various interfaces representing the behaviors that the system must exhibit
- classes implementing the identified interfaces are built and added to business-domain classes as needed

"business-domain classes may all be base classes without any inheritance at all"

benefits:
- higher flexibility
    - HAS-A can be better than an IS-A relationship
- initial design simplified by identifying system object behaviors in separate interfaces instead of creating a hierarchical relationship to distribute behaviors among business-domain classes via inheritance

drawbacks:
- all methods being provided by the composed classes must be implemented in the derived class, even if they are only forwarding methods
- ^^ inheritance results in less duplication
- this drawback can be avoided by using traits or mixins
