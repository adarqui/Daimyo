What Is an Object?
- an object is a software bundle of related state and behavior. Software objects are often used to model the real-world objects that you find in everyday life. 
- have state and behavior.
- identifying the state and behavior for real-world objects is a great way to begin thinking in terms of object-oriented programming.
- for each object that you see, ask yourself two questions: "What possible states can this object be in?" and "What possible behavior can this object perform?"
- methods (functions): behavior
- fields (variables): state

What Is a Class?
- a class is a blueprint or prototype from which objects are created.
- in object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles.
- a class is the blueprint from which individual objects are created.

What Is Inheritance?
- inheritance provides a powerful and natural mechanism for organizing and structuring your software. 
- in this example, Bicycle now becomes the superclass of MountainBike, RoadBike, and TandemBike.
- in the Java programming language, each class is allowed to have one direct superclass, and each superclass has the potential for an unlimited number of subclasses.
- create a subclass via 'extends'.. class MountainBike extends Bike

What Is an Interface?
- an interface is a contract between a class and the outside world. When a class implements an interface, it promises to provide the behavior published by that interface.
- in its most common form, an interface is a group of related methods with empty bodies.
- to implement an interface, use the 'implements' keyword: class ACMEBicycle implements Bicycle
- interfaces form a contract between the class and the outside world, and this contract is enforced at build time by the compiler.
- if your class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.

What Is a Package?
- a package is a namespace for organizing classes and interfaces in a logical manner. Placing your code into packages makes large software projects easier to manage.
- a package is a namespace that organizes a set of related classes and interfaces.

Modularity: The source code for an object can be written and maintained independently of the source code for other objects. Once created, an object can be easily passed around inside the system.

Information-hiding: By interacting only with an object's methods, the details of its internal implementation remain hidden from the outside world.

Code re-use: If an object already exists (perhaps written by another software developer), you can use that object in your program. This allows specialists to implement/test/debug complex, task-specific objects, which you can then trust to run in your own code.

Pluggability and debugging ease: If a particular object turns out to be problematic, you can simply remove it from your application and plug in a different object as its replacement. This is analogous to fixing mechanical problems in the real world. If a bolt breaks, you replace it, not the entire machine.
