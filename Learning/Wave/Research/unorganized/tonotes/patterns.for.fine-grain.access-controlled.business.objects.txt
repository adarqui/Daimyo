source: http://www.hillside.net/plop/2014/papers/Security/rubis_2.pdf

common business object:
- object which is used by web-based applications and services and is a widely acceptable entity in the running of a business
- purchase order, invoice, customer profile etc

Fine Grain Access Control Pattern consists of:
- Rights Based Pattern
- Role Based Pattern
- Access Control List Pattern

objects need to be designed with built-in support for fine-grained access control to their elements

Business Object MetaModel:
- BusinessDataObject class:  for business objects. Such an object is uniquely identified and all objects from the same class have similar states and behavior, as per the object-oriented paradigm. A class state is defined by its attributes (i.e. properties) and an object is capable to execute a set of operations. 
- Attribute class: class: an object of this class describes the name and type of a business object's attribute. The runtime value of an attribute is not addressed in this pattern. A BO may have zero or more Attribute objects, one for each of its attribute. 
- Operation Class: each operation supported by a BO is described by an Operation object. Its attributes may include name, return value, parameter list.

Ariba for example uses permission objects which can be assigned to role objects, which in turn are then assigned to user objects. Developers can then assigned permissions to actions such as editibility and visibility of the fields within a given object. This allows Ariba business objects to be accessed via permissions, without the need for further coding.  

CRUDC - create, read, update, delete, copy


5. RELATED PATTERNS AND FRAMEWORKS
5.1 Discretionary Access Control (DAC)
The DAC pattern enforces access control based on user identities and the ownership of objects. The owner of an object may grant permission to another user to access the object, and the granted user may further delegate the permission to a third person. [11]

5.2 Mandatory Access Control (MAC)
The MAC pattern governs access based on the security level of subjects (e.g., users) and objects (e.g., data). Ac-cess to an object is granted only if the security levels of the subject and the object satisfy certain constraints. The MAC pattern is also known as multilevel security model and lattice-based access control. [11]

5.3 RoleBased Access Control (RBAC)
The RBAC pattern enforces access control based on roles. A role is given a set of permissions, and the users assigned to the role acquires the permissions given to the role. Since the RBAC pattern is based on roles which are in general fewer than the number of users, it is useful for managing a large number of users. [9]

5.4 Attrubite-based Access Control (ABAC)
Attribute-based access control defines an access control architecture whereby access rights are granted to users through the use of policies which combine attributes together. The policies can then use any type of attributes (user attributes, resource attribute, etc...). Attributes can be compared to static values or to one another thus enabling relation-based access control. [12]

5.5 Semantic Access Control (SAC)
The Semantic Access control model was created in 2002. The fundamentals of this semantics-based access control model are the definition of several metadata models at different layers of the Semantic Web. Each component of SAC represents the semantic model of a component of the access control system. The semantic properties contained in the different metadata models are used for the specification of access control criteria, dynamic policy allocation, parameter instantiation and policy validation processes. [13]
