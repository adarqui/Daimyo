source: http://ff.tu-sofia.bg/~bogi/France/SoftEng/books/Software%20Engineering%20Best%20Practices.%20Lessons%20from%20Successful%20Projects%20in%20the%20Top%20Companies%20(McGraw-Hill,%202010).pdf

software engineering is about people:
- people who have a need for and use software
- people who build it
- people who test it
- people who manage software projects
- people who support and maintain it


It sometimes seems as
if the software industry is as strongly driven by fads and fashion as
the garment industry. Many practitioners become apostolic in their
worship of a particular approach, practice, or tool—for a while at
least. But when the metrics are collected and analyzed, the sad truth
is revealed—as an industry we have not made a great deal of progress.
There have been no major breakthroughs that have led to the painless
production of quality software delivered on time and within a predicted
cost. And the skeptics ask, “Is software engineering an oxymoron?”

Software quality also comes under the microscope in this book. He describes software quality as the key factor to successful software engineering—the driving factor that has more influence on software costs, schedules, and success than any other. 

software quality:
- key factor to successful software engineering
- driving fator that has more influence on software costs, schedules, and success than any other

Throughout the book, there is an emphasis on the need for measurement
and metrics. Capers is critical of the lack of measurement, and the
use of metrics that he describes as hazardous. The software industry
deserves to be critically questioned while it makes little use of measurement
and metrics. As Capers asserts, terms like “best practices” are an
embarrassment when we cannot present statistical evidence

Introduction
============

four key areas software engineering needs to improve to become a solid engineering discipline rather than a craft:
- software security
- software quality: defect prevention and defect removal methods
    - need inspection, static analysis, and testing
- software measurements: flaws of cost per defect, lines of code
- preserving and renovating legacy applications

Software engineering also needs to include effective methods for extracting or “mining” legacy applications to recover lost business rules and requirements.


IMP
It is common knowledge that many software projects are sized incorrectly, estimated incorrectly, and have schedules committed that are too short for the capabilities of the development team. These lapses in project management can cause the affected software projects to either fail completely or to have serious cost and schedule overruns.

Software Quality: The Key to Successful Software Engineering 

For example, the popular “cost per defect” metric actually penalizes quality and achieves the lowest cost for the buggiest applications! 

The definition that quality means “conformance to requirements” is challenged on the grounds that many requirements are harmful or “toxic” and should not be implemented. 

Accurate measurement is the key that will unlock better software quality and security. Better software quality and security are the keys that will allow software engineering to become a true profession that is equal to older engineering fields in achieving successful results.


