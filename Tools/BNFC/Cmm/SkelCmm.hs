module SkelCmm where

-- Haskell module generated by the BNF converter

import AbsCmm
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog functions  -> failure x


transFunction :: Function -> Result
transFunction x = case x of
  Fun type' id decls stms  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  Dec type' ids  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SDecl decl  -> failure x
  SExp exp  -> failure x
  SBlock stms  -> failure x
  SWhile exp stm  -> failure x
  SReturn exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAss id exp  -> failure x
  ELt exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  Call id exps  -> failure x
  EVar id  -> failure x
  EStr str  -> failure x
  EInt n  -> failure x
  EDouble d  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TDouble  -> failure x



